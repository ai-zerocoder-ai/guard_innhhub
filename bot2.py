import os
import asyncio
import logging
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ChatType
from aiogram.filters import Command

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    exit(1)

# –ó–∞–≥—Ä—É–∂–∞–µ–º CHAT_ID –≥—Ä—É–ø–ø—ã –∏–∑ .env (—á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, "@inn")
CHAT_ID_raw = os.getenv("CHAT_ID")
if not CHAT_ID_raw:
    logger.error("CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    exit(1)
if CHAT_ID_raw.startswith("-") and CHAT_ID_raw[1:].isdigit():
    CHAT_ID = int(CHAT_ID_raw)
else:
    CHAT_ID = CHAT_ID_raw

# URL –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É, –∫–æ—Ç–æ—Ä—ã–π –±–æ—Ç –≤—ã–¥–∞—ë—Ç –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ –ø–æ—Å–ª–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
GROUP_INVITE_LINK = os.getenv("GROUP_INVITE_LINK", "https://t.me/testinnhh")

# URL deep link –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –±–æ—Ç–æ–º —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
BOT_DEEP_LINK = f"https://t.me/{os.getenv('BOT_USERNAME', 'Innhhub_guardian_bot')}?start=verify"

logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º CHAT_ID: {CHAT_ID}")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–¥—à–∏—Ö –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
verified_users = set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ.
@dp.message(lambda message: message.new_chat_members is not None)
async def new_member_handler(message: types.Message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö: {message.new_chat_members}")
    for user in message.new_chat_members:
        user_id = user.id
        full_name = user.full_name

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ –∫–∞–ø—á—É
        if user_id in verified_users:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∫–∞–ø—á–∏")
            continue

        logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {user_id} - {full_name}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞–ø—á–µ–π
        try:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–í–û–î–û–†–û–î", callback_data=f"verify_{user_id}")]
            ])
            text = (
                f"–ü—Ä–∏–≤–µ—Ç, *{full_name}*!\n\n"
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *H2 Innovation Hub*! üöÄ\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —É–¥–æ—Å—Ç–æ–≤–µ—Ä–∏—Ç—å—Å—è, —á—Ç–æ —Ç—ã –Ω–µ –±–æ—Ç.\n\n"
                "–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å:\n\n"
                "–ö–∞–∫–æ–π —ç–ª–µ–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º –≤ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º–µ –ú–µ–Ω–¥–µ–ª–µ–µ–≤–∞?"
            )
            await bot.send_message(user_id, text, parse_mode="Markdown", reply_markup=keyboard)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
        try:
            group_message = (
                f"üëã –ü—Ä–∏–≤–µ—Ç, [{full_name}](tg://user?id={user_id})!\n\n"
                "–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –≥—Ä—É–ø–ø–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.\n\n"
                "–ù–∞–∂–º–∏ [–∑–¥–µ—Å—å]({deep_link}) –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –õ–° —Å –±–æ—Ç–æ–º.\n\n"
                "–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–π—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ **60 —Å–µ–∫—É–Ω–¥**, –∏–Ω–∞—á–µ —Ç–µ–±—è —É–¥–∞–ª—è—Ç."
            ).format(deep_link=BOT_DEEP_LINK)
            await message.answer(group_message, parse_mode="Markdown", disable_web_page_preview=True)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except Exception as ex:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {ex}")

        # –ñ–¥—ë–º 60 —Å–µ–∫—É–Ω–¥; –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –±–∞–Ω
        await asyncio.sleep(60)
        if user_id not in verified_users:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –ø—Ä–æ—à—ë–ª –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é, —É–≤–µ–¥–æ–º–ª—è–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –±–∞–Ω")
            try:
                # –ü–æ–ø—ã—Ç–∫–∞ —É–≤–µ–¥–æ–º–∏—Ç—å —á–µ—Ä–µ–∑ –õ–°
                await bot.send_message(
                    user_id,
                    "üö´ –¢—ã –Ω–µ —É—Å–ø–µ–ª –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ H2 Innovation Hub.\n"
                    "–í–æ–∑–º–æ–∂–Ω–æ, —É —Ç–µ–±—è –∑–∞–∫—Ä—ã—Ç—ã –õ–°. –û—Ç–∫—Ä–æ–π –∏—Ö –∏ –Ω–∞–±–µ—Ä–∏ /retry, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É.",
                    parse_mode="Markdown"
                )
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            except Exception as notification_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {notification_error}")
                try:
                    await message.answer(
                        f"‚ö†Ô∏è {full_name}, –ø–æ—Ö–æ–∂–µ, —á—Ç–æ –º—ã —Ç–µ–±—è –∑–∞–±–∞–Ω–∏–º.",
                        reply_to_message_id=message.message_id,
                        parse_mode="Markdown"
                    )
                    logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                except Exception as group_notification_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {group_notification_error}")
            await asyncio.sleep(10)
            if user_id not in verified_users:
                try:
                    await bot.ban_chat_member(CHAT_ID, user_id)
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω –∑–∞ –Ω–µ—É–¥–∞—á–Ω—É—é –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é")
                except Exception as ban_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {ban_error}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–∫–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
@dp.callback_query(lambda callback: callback.data.startswith("verify_"))
async def verify_user(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split("_")[1])
    if user_id != callback_query.from_user.id:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞ –¥—Ä—É–≥–æ–≥–æ: {callback_query.from_user.id} –≤–º–µ—Å—Ç–æ {user_id}")
        return
    verified_users.add(user_id)
    await callback_query.answer()
    await bot.send_message(user_id,
        "‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ H2 Innovation Hub –ø—Ä–æ–π–¥–µ–Ω–∞.\n\n"
        "–¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É.\n\n"
        "–ï—Å–ª–∏ –±—É–¥—É—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –≤—Ö–æ–¥–æ–º, –Ω–∞–±–µ—Ä–∏ /retry",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–í—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É", url=GROUP_INVITE_LINK)]
        ])
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –≤ –õ–°
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    if message.from_user.id in verified_users:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–í—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É", url=GROUP_INVITE_LINK)]
        ])
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –¢—ã —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –≤—Å—Ç—É–ø–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É.", parse_mode="Markdown", reply_markup=keyboard)
    else:
        await message.answer(
            "–ü—Ä–∏–≤–µ—Ç! –Ø - –±–æ—Ç-–≤–µ—Ä–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è H2 Innovation Hub.\n\n"
            "–ß—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ –≥—Ä—É–ø–ø—É, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é.\n\n"
            "–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å, —á—Ç–æ —Ç—ã –Ω–µ –±–æ—Ç.",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ü—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é", callback_data=f"verify_{message.from_user.id}")]
            ])
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /retry –≤ –õ–°
@dp.message(Command("retry"))
async def retry_handler(message: types.Message):
    if message.chat.type != ChatType.PRIVATE:
        logger.info(f"/retry –ø–æ–ª—É—á–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ –æ—Ç {message.from_user.id}")
        await message.reply("–ö–æ–º–∞–Ω–¥–∞ /retry —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –õ–° —Å –±–æ—Ç–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /retry –≤ –õ–°.")
        return

    user_id = message.from_user.id
    full_name = message.from_user.full_name
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /retry –æ—Ç {user_id} - {full_name}")
    try:
        await bot.unban_chat_member(CHAT_ID, user_id, only_if_banned=True)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ {user_id}: {e}")
    verified_users.discard(user_id)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é", callback_data=f"verify_{user_id}")]
    ])
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, *{full_name}*!\n\n"
        "–¢—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é —Å–Ω–æ–≤–∞, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        parse_mode="Markdown",
        reply_markup=keyboard
    )
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ {user_id}")

async def main():
    logger.info("–ó–∞–ø—É—Å–∫ polling –±–æ—Ç–∞")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
