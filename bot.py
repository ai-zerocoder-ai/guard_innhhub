import os
import asyncio
import logging
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.enums import ChatType
from aiogram.filters import Command

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,  # –≤—ã–≤–æ–¥ –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    exit(1)

# –ó–∞–≥—Ä—É–∂–∞–µ–º CHAT_ID –∏–∑ .env (—á–∏—Å–ª–æ–≤–æ–π ID –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä, "@inn")
CHAT_ID_raw = os.getenv("CHAT_ID")
if not CHAT_ID_raw:
    logger.error("CHAT_ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    exit(1)

if CHAT_ID_raw.startswith("-") and CHAT_ID_raw[1:].isdigit():
    CHAT_ID = int(CHAT_ID_raw)
else:
    CHAT_ID = CHAT_ID_raw

logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º CHAT_ID: {CHAT_ID}")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–µ–¥—à–∏—Ö –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
verified_users = set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ‚Äì —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –µ—Å—Ç—å new_chat_members
@dp.message(lambda message: message.new_chat_members is not None)
async def new_member_handler(message: types.Message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö: {message.new_chat_members}")
    for user in message.new_chat_members:
        user_id = user.id
        full_name = user.full_name

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∫–∞–ø—á–∏
        if user_id in verified_users:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∫–∞–ø—á–∏")
            continue

        logger.debug(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞: {user_id} - {full_name}")
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –õ–° —Å –∫–∞–ø—á–µ–π
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–í–û–î–û–†–û–î", callback_data=f"verify_{user_id}")]
            ])
            text = (
                f"–ü—Ä–∏–≤–µ—Ç, *{full_name}*!\n\n"
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *H2 Innovation Hub*! üöÄ\n\n"
                "–°–Ω–∞—á–∞–ª–∞ –º—ã –¥–æ–ª–∂–Ω—ã —É–¥–æ—Å—Ç–æ–≤–µ—Ä–∏—Ç—å—Å—è, —á—Ç–æ –í—ã - –Ω–µ –±–æ—Ç.\n\n"
                "–ü—Ä–æ—Å–∏–º –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å:\n\n"
                "–ö–∞–∫–æ–π —ç–ª–µ–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º –≤ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å–∏—Å—Ç–µ–º–µ —Ö–∏–º–∏—á–µ—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –î.–ò. –ú–µ–Ω–¥–µ–ª–µ–µ–≤–∞?"
            )
            await bot.send_message(user_id, text, parse_mode="Markdown", reply_markup=keyboard)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –õ–° –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –ø–µ—Ä–µ–π—Ç–∏ –≤ –õ–°
        try:
            group_message = (
                f"üëã –ü—Ä–∏–≤–µ—Ç, [{full_name}](tg://user?id={user_id})!\n\n"
                "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 60 —Å–µ–∫—É–¥ –ø—Ä–æ–π—Ç–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é –ø–æ "
                "[—Å—Å—ã–ª–∫–µ](https://t.me/Innhhub_guardian_bot?start=verify)\n\n"
                "–ò–Ω–∞—á–µ, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–∏–¥–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å –í–∞—Å –∏–∑ –≥—Ä—É–ø–ø—ã."
            )
            await message.answer(group_message, parse_mode="Markdown")
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        except Exception as ex:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {ex}")

        # –î–∞–ª–µ–µ, –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ, –æ–∂–∏–¥–∞–µ–º 60 —Å–µ–∫—É–Ω–¥ –∏, –µ—Å–ª–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞, –±–∞–Ω–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await asyncio.sleep(60)
        if user_id not in verified_users:
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –ø—Ä–æ—à—ë–ª –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±–∞–Ω")
            try:
                await bot.ban_chat_member(CHAT_ID, user_id)
                await bot.send_message(user_id,
                    "üö´ –¢—ã –Ω–µ —É—Å–ø–µ–ª –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ Hydrogen Innovation Hub.\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ –Ω–∞–±—Ä–∞–≤ –∫–æ–º–∞–Ω–¥—É /retry")
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω")
            except Exception as kick_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {kick_error}")

@dp.callback_query(lambda callback: callback.data.startswith("verify_"))
async def verify_user(callback_query: types.CallbackQuery):
    user_id = int(callback_query.data.split("_")[1])
    if user_id != callback_query.from_user.id:
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞ –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {callback_query.from_user.id} –≤–º–µ—Å—Ç–æ {user_id}")
        return
    verified_users.add(user_id)
    await callback_query.answer()  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å
    await bot.send_message(user_id,
        "‚úÖ –í–µ—Ä–∏—Ñ–∏–∫–∞–∏—è –≤ Hydrogen Innovation Hub –ø—Ä–æ–π–¥–µ–Ω–∞.\n\n"
        "–ü–æ–ª—å–∑—É–π—Ç–µ—Å—å –≤–æ –±–ª–∞–≥–æ!))",
        parse_mode="Markdown"
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")

@dp.message(Command("start"))
async def start_handler(message: types.Message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    if message.from_user.id in verified_users:
        await message.answer("–ü—Ä–∏–≤–µ—Ç! –¢—ã —É–∂–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –≤ Hydrogen Innovation Hub.")
    else:
        await message.answer(
            "–°–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.\n\n"
            "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π, –Ω–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /retry."
        )

@dp.message(Command("retry"))
async def retry_handler(message: types.Message):
    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∏—à–ª–∞ –Ω–µ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if message.chat.type != ChatType.PRIVATE:
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /retry –ø–æ–ª—É—á–µ–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        await message.reply("–ö–æ–º–∞–Ω–¥–∞ /retry —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /retry –≤ –õ–°.")
        return

    user_id = message.from_user.id
    full_name = message.from_user.full_name
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /retry –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} - {full_name}")
    try:
        await bot.unban_chat_member(CHAT_ID, user_id, only_if_banned=True)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–∞–Ω–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    verified_users.discard(user_id)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–í–û–î–û–†–û–î", callback_data=f"verify_{user_id}")]
    ])
    invite_link = "https://t.me/testinnhh"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã
    text = (
        f"–ü—Ä–∏–≤–µ—Ç, *{full_name}*!\n\n"
        "–¢—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.\n\n"
        "–î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑ –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫—É. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.\n\n"
        f"–ü–æ—Å–ª–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤—Å—Ç—É–ø–∏ –≤ –≥—Ä—É–ø–ø—É –ø–æ [—ç—Ç–æ–π —Å—Å—ã–ª–∫–µ]({invite_link})."
    )
    await message.answer(text, parse_mode="Markdown", reply_markup=keyboard)
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

async def main():
    logger.info("–ó–∞–ø—É—Å–∫ polling –±–æ—Ç–∞")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
